// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MapsIndoorsMapbox
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreGraphics
import Foundation
import MapboxDirections
import MapboxMaps
import MapsIndoors
import MapsIndoorsCore
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class ValueAnimator : Swift.Hashable {
  public struct Option {
  }
  public class OptionBuilder {
    public init()
    public func setYoyo(_ v: Swift.Bool) -> MapsIndoorsMapbox.ValueAnimator.OptionBuilder
    public func setRepeatCount(_ v: Swift.Int) -> MapsIndoorsMapbox.ValueAnimator.OptionBuilder
    public func setDelay(_ v: Foundation.TimeInterval) -> MapsIndoorsMapbox.ValueAnimator.OptionBuilder
    public func setRepeatInfinitely(_ b: Swift.Bool) -> MapsIndoorsMapbox.ValueAnimator.OptionBuilder
    public func build() -> MapsIndoorsMapbox.ValueAnimator.Option
    @objc deinit
  }
  public typealias EndFunction = () -> Swift.Void
  public typealias ChangeFunction = (Swift.String, MapsIndoorsMapbox.ValueAnimatable) -> Swift.Void
  public func hash(into hasher: inout Swift.Hasher)
  public var duration: Swift.Double {
    get
  }
  public var covered: Swift.Double {
    get
  }
  public var delay: Swift.Double {
    get
  }
  public var yoyo: Swift.Bool {
    get
  }
  public var repeatCount: Swift.Int {
    get
  }
  public var counted: Swift.Int {
    get
  }
  public var easing: MapsIndoorsMapbox.Easing! {
    get
    set
  }
  public var isInfinitely: Swift.Bool {
    get
  }
  public var isAnimating: Swift.Bool {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public var isDisposed: Swift.Bool {
    get
  }
  @available(swift, obsoleted: 0.6.3, renamed: "changeCallback")
  public var changeFunction: MapsIndoorsMapbox.ValueAnimator.ChangeFunction?
  public var changeCallback: MapsIndoorsMapbox.ValueAnimator.ChangeFunction?
  @available(swift, obsoleted: 0.6.3, renamed: "endCallback")
  public var endFunction: MapsIndoorsMapbox.ValueAnimator.EndFunction?
  public var endCallback: MapsIndoorsMapbox.ValueAnimator.EndFunction?
  public var callbackOnMainThread: Swift.Bool
  public static func == (left: MapsIndoorsMapbox.ValueAnimator, right: MapsIndoorsMapbox.ValueAnimator) -> Swift.Bool
  public func resume()
  public func pause()
  public func finish()
  public func dispose()
  public static var debug: Swift.Bool
  public static var frameRate: Swift.Int {
    get
    set
  }
  public static var count: Swift.Int {
    get
  }
  public static func finishAll()
  public static func disposeAll()
  public static func hasAnimation(_ prop: Swift.String) -> Swift.Bool
  @discardableResult
  public static func animate(_ prop: Swift.String, from: MapsIndoorsMapbox.AnimatableValueType, to: MapsIndoorsMapbox.AnimatableValueType, duration: Foundation.TimeInterval, easing: MapsIndoorsMapbox.Easing? = nil, onChanged: MapsIndoorsMapbox.ValueAnimator.ChangeFunction? = nil) -> MapsIndoorsMapbox.ValueAnimator
  @discardableResult
  public static func animate(_ prop: Swift.String, from: MapsIndoorsMapbox.AnimatableValueType, to: MapsIndoorsMapbox.AnimatableValueType, duration: Foundation.TimeInterval, onChanged: MapsIndoorsMapbox.ValueAnimator.ChangeFunction? = nil) -> MapsIndoorsMapbox.ValueAnimator
  @discardableResult
  public static func animate(_ prop: Swift.String, from: MapsIndoorsMapbox.AnimatableValueType, to: MapsIndoorsMapbox.AnimatableValueType, duration: Foundation.TimeInterval, easing: MapsIndoorsMapbox.Easing? = nil, onChanged: MapsIndoorsMapbox.ValueAnimator.ChangeFunction? = nil, option: MapsIndoorsMapbox.ValueAnimator.Option? = nil) -> MapsIndoorsMapbox.ValueAnimator
  @discardableResult
  public static func animate(props: [Swift.String], from: [MapsIndoorsMapbox.AnimatableValueType], to: [MapsIndoorsMapbox.AnimatableValueType], duration: Foundation.TimeInterval, easing: MapsIndoorsMapbox.Easing? = nil, onChanged: MapsIndoorsMapbox.ValueAnimator.ChangeFunction? = nil, option: MapsIndoorsMapbox.ValueAnimator.Option? = nil, onEnd: MapsIndoorsMapbox.ValueAnimator.EndFunction? = nil) -> MapsIndoorsMapbox.ValueAnimator
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@objc extension MapsIndoors.MPMapConfig {
  @objc convenience dynamic public init(mapBoxView: MapboxMaps.MapView, accessToken: Swift.String)
}
@_hasMissingDesignatedInitializers public class EaseLinear {
  public static func easeNone() -> MapsIndoorsMapbox.Easing
  public static func easeIn() -> MapsIndoorsMapbox.Easing
  public static func easeOut() -> MapsIndoorsMapbox.Easing
  public static func easeInOut() -> MapsIndoorsMapbox.Easing
  @objc deinit
}
@objc extension MapboxMaps.MapboxMap {
  @objc final public func getMapsIndoorsMapboxLayerId(for mpLayer: MapsIndoorsMapbox.MPLayer) -> Swift.String
}
@objc public enum MPLayer : Swift.Int {
  case TILE_LAYER
  case MARKER_LAYER
  case POLYGON_FILL_LAYER
  case POLYGON_LINE_LAYER
  case MODEL_2D_LAYER
  case ACCURACY_CIRCLE_LAYER
  case BLUEDOT_LAYER
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class MapBoxProvider : ObjectiveC.NSObject, MapsIndoorsCore.MPMapProvider {
  @objc public var routingService: MapsIndoorsCore.MPExternalDirectionsService {
    @objc get
  }
  @objc public var distanceMatrixService: MapsIndoorsCore.MPExternalDistanceMatrixService {
    @objc get
  }
  @objc public var customInfoWindow: MapsIndoors.MPCustomInfoWindow?
  public func setTileProvider(tileProvider: MapsIndoorsCore.MPTileProvider)
  @objc public func reloadTilesForFloorChange()
  @objc final public let view: UIKit.UIView?
  @objc public var padding: UIKit.UIEdgeInsets
  @objc public var MPaccessibilityElementsHidden: Swift.Bool
  @objc public var delegate: MapsIndoorsCore.MPMapProviderDelegate?
  public var positionPresenter: MapsIndoorsCore.MPPositionPresenter
  @objc public var collisionHandling: MapsIndoors.MPCollisionHandling
  public var routeRenderer: MapsIndoorsCore.MPRouteRenderer {
    get
  }
  public func setViewModels(models: [MapsIndoorsCore.MPViewModel], forceClear: Swift.Bool)
  @objc public var cameraOperator: MapsIndoorsCore.MPCameraOperator {
    @objc get
  }
  @objc required public init(mapView: MapboxMaps.MapView, accessToken: Swift.String)
  @objc public func setup()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EaseSine {
  public static let strength: Swift.Int
  public static func easeIn() -> MapsIndoorsMapbox.Easing
  public static func easeOut() -> MapsIndoorsMapbox.Easing
  public static func easeInOut() -> MapsIndoorsMapbox.Easing
  @objc deinit
}
public protocol AnimatableValueType {
  func toAnimatable() -> MapsIndoorsMapbox.ValueAnimatable
}
public struct ValueAnimatable {
  public var value: Swift.Double
  public init(_ value: Swift.Int)
  public init(_ value: Swift.Float)
  public init(_ value: CoreFoundation.CGFloat)
  public init(_ value: Swift.Double)
  public var timeInterval: Foundation.TimeInterval {
    get
  }
}
extension MapsIndoorsMapbox.ValueAnimatable {
  public var cg: CoreFoundation.CGFloat {
    get
  }
  public var i: Swift.Int {
    get
  }
  public var f: Swift.Float {
    get
  }
  public var d: Swift.Double {
    get
  }
}
extension MapsIndoorsMapbox.ValueAnimatable : Swift.Hashable {
  public static func == (lhs: MapsIndoorsMapbox.ValueAnimatable, rhs: MapsIndoorsMapbox.ValueAnimatable) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MapsIndoorsMapbox.ValueAnimatable {
  public static func < (lhs: MapsIndoorsMapbox.ValueAnimatable, rhs: MapsIndoorsMapbox.ValueAnimatable) -> Swift.Bool
  public static func <= (lhs: MapsIndoorsMapbox.ValueAnimatable, rhs: MapsIndoorsMapbox.ValueAnimatable) -> Swift.Bool
  public static func > (lhs: MapsIndoorsMapbox.ValueAnimatable, rhs: MapsIndoorsMapbox.ValueAnimatable) -> Swift.Bool
  public static func >= (lhs: MapsIndoorsMapbox.ValueAnimatable, rhs: MapsIndoorsMapbox.ValueAnimatable) -> Swift.Bool
}
extension MapsIndoorsMapbox.ValueAnimatable {
  prefix public static func - (lhs: MapsIndoorsMapbox.ValueAnimatable) -> MapsIndoorsMapbox.ValueAnimatable
  public static func + (lhs: MapsIndoorsMapbox.ValueAnimatable, rhs: MapsIndoorsMapbox.ValueAnimatable) -> MapsIndoorsMapbox.ValueAnimatable
  public static func - (lhs: MapsIndoorsMapbox.ValueAnimatable, rhs: MapsIndoorsMapbox.ValueAnimatable) -> MapsIndoorsMapbox.ValueAnimatable
  public static func += (lhs: inout MapsIndoorsMapbox.ValueAnimatable, rhs: MapsIndoorsMapbox.ValueAnimatable)
  public static func -= (lhs: inout MapsIndoorsMapbox.ValueAnimatable, rhs: MapsIndoorsMapbox.ValueAnimatable)
  public static func *= (lhs: inout MapsIndoorsMapbox.ValueAnimatable, rhs: Swift.Double)
  public static func * (lhs: MapsIndoorsMapbox.ValueAnimatable, rhs: Swift.Double) -> MapsIndoorsMapbox.ValueAnimatable
  public static func / (lhs: MapsIndoorsMapbox.ValueAnimatable, rhs: Swift.Double) -> MapsIndoorsMapbox.ValueAnimatable
}
extension Swift.Int : MapsIndoorsMapbox.AnimatableValueType {
  public func toAnimatable() -> MapsIndoorsMapbox.ValueAnimatable
}
extension Swift.Float : MapsIndoorsMapbox.AnimatableValueType {
  public func toAnimatable() -> MapsIndoorsMapbox.ValueAnimatable
}
extension CoreFoundation.CGFloat : MapsIndoorsMapbox.AnimatableValueType {
  public func toAnimatable() -> MapsIndoorsMapbox.ValueAnimatable
}
extension Swift.Double : MapsIndoorsMapbox.AnimatableValueType {
  public func toAnimatable() -> MapsIndoorsMapbox.ValueAnimatable
}
public typealias Easing = (_ t: Swift.Double, _ b: Swift.Double, _ c: Swift.Double, _ d: Swift.Double) -> Swift.Double
extension MapsIndoorsMapbox.MPLayer : Swift.Equatable {}
extension MapsIndoorsMapbox.MPLayer : Swift.Hashable {}
extension MapsIndoorsMapbox.MPLayer : Swift.RawRepresentable {}
